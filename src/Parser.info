-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.11 from src/Parser.y
-----------------------------------------------------------------------------

state 34 contains 1 shift/reduce conflicts.
state 58 contains 1 shift/reduce conflicts.
state 59 contains 1 shift/reduce conflicts.
state 60 contains 1 shift/reduce conflicts.
state 61 contains 11 shift/reduce conflicts.
state 62 contains 1 shift/reduce conflicts.
state 63 contains 1 shift/reduce conflicts.
state 64 contains 1 shift/reduce conflicts.
state 65 contains 1 shift/reduce conflicts.
state 66 contains 1 shift/reduce conflicts.
state 67 contains 1 shift/reduce conflicts.
state 68 contains 1 shift/reduce conflicts.
state 69 contains 1 shift/reduce conflicts.
state 93 contains 11 shift/reduce conflicts.
state 95 contains 12 shift/reduce conflicts.
state 109 contains 11 shift/reduce conflicts.
state 113 contains 11 shift/reduce conflicts.

terminal intArray is unused
terminal break is unused
terminal print is unused
terminal of is unused
terminal '[' is unused
terminal ']' is unused
terminal '&' is unused
terminal '|' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> Program                           (0)
	Program -> let DeclList in ExpSeq                  (1)
	DeclList -> Decl                                   (2)
	DeclList -> DeclList Decl                          (3)
	Decl -> VarDecl                                    (4)
	Decl -> FunDecl                                    (5)
	FunDecl -> function id '(' TypeFields ')' '=' Exp   (6)
	FunDecl -> function id '(' ')' '=' Exp             (7)
	FunDecl -> function id '(' TypeFields ')' ':' TypeId '=' Exp   (8)
	FunDecl -> function id '(' ')' ':' TypeId '=' Exp   (9)
	TypeFields -> TypeField                            (10)
	TypeFields -> TypeFields ',' TypeField             (11)
	TypeField -> id ':' TypeId                         (12)
	TypeId -> int                                      (13)
	TypeId -> string                                   (14)
	VarDeclList -> VarDecl                             (15)
	VarDeclList -> VarDeclList VarDecl                 (16)
	VarDecl -> var id ':=' Exp                         (17)
	LValue -> id                                       (18)
	ExpSeq -> Exp                                      (19)
	ExpSeq -> ExpSeq ';' Exp                           (20)
	ExpList -> Exp                                     (21)
	ExpList -> ExpList ',' Exp                         (22)
	Exp -> num                                         (23)
	Exp -> LValue                                      (24)
	Exp -> Exp '+' Exp                                 (25)
	Exp -> Exp '-' Exp                                 (26)
	Exp -> Exp '*' Exp                                 (27)
	Exp -> Exp '/' Exp                                 (28)
	Exp -> Exp '%' Exp                                 (29)
	Exp -> Exp '=' Exp                                 (30)
	Exp -> Exp '<>' Exp                                (31)
	Exp -> Exp '<' Exp                                 (32)
	Exp -> Exp '<=' Exp                                (33)
	Exp -> Exp '>' Exp                                 (34)
	Exp -> Exp '>=' Exp                                (35)
	Exp -> '-' Exp                                     (36)
	Exp -> id ':=' Exp                                 (37)
	Exp -> id '(' ExpList ')'                          (38)
	Exp -> '(' ExpSeq ')'                              (39)
	Exp -> if Exp then Exp                             (40)
	Exp -> if Exp then Exp else Exp                    (41)
	Exp -> while Exp do Exp                            (42)
	Exp -> for id ':=' Exp to Exp do Exp               (43)
	Exp -> let VarDeclList in ExpSeq end               (44)
	Exp -> printi '(' Exp ')'                          (45)
	Exp -> scani '(' ')'                               (46)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	num            { TOK_NUM $$ }
	id             { TOK_ID $$ }
	int            { TOK_INT }
	string         { TOK_STRING }
	intArray       { TOK_INTARRAY }
	break          { TOK_BREAK }
	do             { TOK_DO }
	else           { TOK_ELSE }
	end            { TOK_END }
	for            { TOK_FOR }
	function       { TOK_FUNCTION }
	print          { TOK_PRINT }
	printi         { TOK_PRINTI }
	scani          { TOK_SCANI }
	if             { TOK_IF }
	in             { TOK_IN }
	to             { TOK_TO }
	let            { TOK_LET }
	of             { TOK_OF }
	then           { TOK_THEN }
	var            { TOK_VAR }
	while          { TOK_WHILE }
	','            { TOK_COMMA }
	':'            { TOK_COLON }
	';'            { TOK_SMI_COLON }
	'('            { TOK_LPAREN }
	')'            { TOK_RPAREN }
	'['            { TOK_LBRACKET }
	']'            { TOK_RBRACKET }
	'+'            { TOK_PLUS }
	'-'            { TOK_MINUS }
	'*'            { TOK_MULT }
	'/'            { TOK_DIV }
	'%'            { TOK_PERC }
	'='            { TOK_EQUAL }
	'<>'           { TOK_UNEQUAL }
	'<'            { TOK_LESS }
	'<='           { TOK_LESS_EQUAL }
	'>'            { TOK_MORE }
	'>='           { TOK_MORE_EQUAL }
	'&'            { TOK_AND }
	'|'            { TOK_OR }
	':='           { TOK_ASSIGN }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	Program         rule  1
	DeclList        rules 2, 3
	Decl            rules 4, 5
	FunDecl         rules 6, 7, 8, 9
	TypeFields      rules 10, 11
	TypeField       rule  12
	TypeId          rules 13, 14
	VarDeclList     rules 15, 16
	VarDecl         rule  17
	LValue          rule  18
	ExpSeq          rules 19, 20
	ExpList         rules 21, 22
	Exp             rules 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	let            shift, and enter state 2

	Program        goto state 3

State 1


	let            shift, and enter state 2


State 2

	Program -> let . DeclList in ExpSeq                 (rule 1)

	function       shift, and enter state 8
	var            shift, and enter state 9

	DeclList       goto state 4
	Decl           goto state 5
	FunDecl        goto state 6
	VarDecl        goto state 7

State 3

	%start_parser -> Program .                          (rule 0)

	%eof           accept


State 4

	Program -> let DeclList . in ExpSeq                 (rule 1)
	DeclList -> DeclList . Decl                         (rule 3)

	function       shift, and enter state 8
	in             shift, and enter state 13
	var            shift, and enter state 9

	Decl           goto state 12
	FunDecl        goto state 6
	VarDecl        goto state 7

State 5

	DeclList -> Decl .                                  (rule 2)

	function       reduce using rule 2
	in             reduce using rule 2
	var            reduce using rule 2


State 6

	Decl -> FunDecl .                                   (rule 5)

	function       reduce using rule 5
	in             reduce using rule 5
	var            reduce using rule 5


State 7

	Decl -> VarDecl .                                   (rule 4)

	function       reduce using rule 4
	in             reduce using rule 4
	var            reduce using rule 4


State 8

	FunDecl -> function . id '(' TypeFields ')' '=' Exp    (rule 6)
	FunDecl -> function . id '(' ')' '=' Exp            (rule 7)
	FunDecl -> function . id '(' TypeFields ')' ':' TypeId '=' Exp    (rule 8)
	FunDecl -> function . id '(' ')' ':' TypeId '=' Exp    (rule 9)

	id             shift, and enter state 11


State 9

	VarDecl -> var . id ':=' Exp                        (rule 17)

	id             shift, and enter state 10


State 10

	VarDecl -> var id . ':=' Exp                        (rule 17)

	':='           shift, and enter state 28


State 11

	FunDecl -> function id . '(' TypeFields ')' '=' Exp    (rule 6)
	FunDecl -> function id . '(' ')' '=' Exp            (rule 7)
	FunDecl -> function id . '(' TypeFields ')' ':' TypeId '=' Exp    (rule 8)
	FunDecl -> function id . '(' ')' ':' TypeId '=' Exp    (rule 9)

	'('            shift, and enter state 27


State 12

	DeclList -> DeclList Decl .                         (rule 3)

	function       reduce using rule 3
	in             reduce using rule 3
	var            reduce using rule 3


State 13

	Program -> let DeclList in . ExpSeq                 (rule 1)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	ExpSeq         goto state 15
	Exp            goto state 16

State 14

	Exp -> LValue .                                     (rule 24)

	do             reduce using rule 24
	else           reduce using rule 24
	end            reduce using rule 24
	function       reduce using rule 24
	in             reduce using rule 24
	to             reduce using rule 24
	then           reduce using rule 24
	var            reduce using rule 24
	','            reduce using rule 24
	';'            reduce using rule 24
	')'            reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	'%'            reduce using rule 24
	'='            reduce using rule 24
	'<>'           reduce using rule 24
	'<'            reduce using rule 24
	'<='           reduce using rule 24
	'>'            reduce using rule 24
	'>='           reduce using rule 24
	%eof           reduce using rule 24


State 15

	Program -> let DeclList in ExpSeq .                 (rule 1)
	ExpSeq -> ExpSeq . ';' Exp                          (rule 20)

	';'            shift, and enter state 56
	%eof           reduce using rule 1


State 16

	ExpSeq -> Exp .                                     (rule 19)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	end            reduce using rule 19
	';'            reduce using rule 19
	')'            reduce using rule 19
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            shift, and enter state 50
	'<>'           shift, and enter state 51
	'<'            shift, and enter state 52
	'<='           shift, and enter state 53
	'>'            shift, and enter state 54
	'>='           shift, and enter state 55
	%eof           reduce using rule 19


State 17

	Exp -> num .                                        (rule 23)

	do             reduce using rule 23
	else           reduce using rule 23
	end            reduce using rule 23
	function       reduce using rule 23
	in             reduce using rule 23
	to             reduce using rule 23
	then           reduce using rule 23
	var            reduce using rule 23
	','            reduce using rule 23
	';'            reduce using rule 23
	')'            reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	'%'            reduce using rule 23
	'='            reduce using rule 23
	'<>'           reduce using rule 23
	'<'            reduce using rule 23
	'<='           reduce using rule 23
	'>'            reduce using rule 23
	'>='           reduce using rule 23
	%eof           reduce using rule 23


State 18

	LValue -> id .                                      (rule 18)
	Exp -> id . ':=' Exp                                (rule 37)
	Exp -> id . '(' ExpList ')'                         (rule 38)

	do             reduce using rule 18
	else           reduce using rule 18
	end            reduce using rule 18
	function       reduce using rule 18
	in             reduce using rule 18
	to             reduce using rule 18
	then           reduce using rule 18
	var            reduce using rule 18
	','            reduce using rule 18
	';'            reduce using rule 18
	'('            shift, and enter state 43
	')'            reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	'/'            reduce using rule 18
	'%'            reduce using rule 18
	'='            reduce using rule 18
	'<>'           reduce using rule 18
	'<'            reduce using rule 18
	'<='           reduce using rule 18
	'>'            reduce using rule 18
	'>='           reduce using rule 18
	':='           shift, and enter state 44
	%eof           reduce using rule 18


State 19

	Exp -> for . id ':=' Exp to Exp do Exp              (rule 43)

	id             shift, and enter state 42


State 20

	Exp -> printi . '(' Exp ')'                         (rule 45)

	'('            shift, and enter state 41


State 21

	Exp -> scani . '(' ')'                              (rule 46)

	'('            shift, and enter state 40


State 22

	Exp -> if . Exp then Exp                            (rule 40)
	Exp -> if . Exp then Exp else Exp                   (rule 41)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 39

State 23

	Exp -> let . VarDeclList in ExpSeq end              (rule 44)

	var            shift, and enter state 9

	VarDeclList    goto state 37
	VarDecl        goto state 38

State 24

	Exp -> while . Exp do Exp                           (rule 42)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 36

State 25

	Exp -> '(' . ExpSeq ')'                             (rule 39)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	ExpSeq         goto state 35
	Exp            goto state 16

State 26

	Exp -> '-' . Exp                                    (rule 36)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 34

State 27

	FunDecl -> function id '(' . TypeFields ')' '=' Exp    (rule 6)
	FunDecl -> function id '(' . ')' '=' Exp            (rule 7)
	FunDecl -> function id '(' . TypeFields ')' ':' TypeId '=' Exp    (rule 8)
	FunDecl -> function id '(' . ')' ':' TypeId '=' Exp    (rule 9)

	id             shift, and enter state 32
	')'            shift, and enter state 33

	TypeFields     goto state 30
	TypeField      goto state 31

State 28

	VarDecl -> var id ':=' . Exp                        (rule 17)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 29

State 29

	VarDecl -> var id ':=' Exp .                        (rule 17)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	function       reduce using rule 17
	in             reduce using rule 17
	var            reduce using rule 17
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            shift, and enter state 50
	'<>'           shift, and enter state 51
	'<'            shift, and enter state 52
	'<='           shift, and enter state 53
	'>'            shift, and enter state 54
	'>='           shift, and enter state 55


State 30

	FunDecl -> function id '(' TypeFields . ')' '=' Exp    (rule 6)
	FunDecl -> function id '(' TypeFields . ')' ':' TypeId '=' Exp    (rule 8)
	TypeFields -> TypeFields . ',' TypeField            (rule 11)

	','            shift, and enter state 83
	')'            shift, and enter state 84


State 31

	TypeFields -> TypeField .                           (rule 10)

	','            reduce using rule 10
	')'            reduce using rule 10


State 32

	TypeField -> id . ':' TypeId                        (rule 12)

	':'            shift, and enter state 82


State 33

	FunDecl -> function id '(' ')' . '=' Exp            (rule 7)
	FunDecl -> function id '(' ')' . ':' TypeId '=' Exp    (rule 9)

	':'            shift, and enter state 80
	'='            shift, and enter state 81


State 34

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)
	Exp -> '-' Exp .                                    (rule 36)

	do             reduce using rule 36
	else           reduce using rule 36
	end            reduce using rule 36
	function       reduce using rule 36
	in             reduce using rule 36
	to             reduce using rule 36
	then           reduce using rule 36
	var            reduce using rule 36
	','            reduce using rule 36
	';'            reduce using rule 36
	')'            reduce using rule 36
	'+'            reduce using rule 36
	'-'            reduce using rule 36
	'*'            reduce using rule 36
	'/'            reduce using rule 36
	'%'            reduce using rule 36
	'='            reduce using rule 36
	'<>'           reduce using rule 36
	'<'            shift, and enter state 52
			(reduce using rule 36)

	'<='           reduce using rule 36
	'>'            reduce using rule 36
	'>='           reduce using rule 36
	%eof           reduce using rule 36


State 35

	ExpSeq -> ExpSeq . ';' Exp                          (rule 20)
	Exp -> '(' ExpSeq . ')'                             (rule 39)

	';'            shift, and enter state 56
	')'            shift, and enter state 79


State 36

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)
	Exp -> while Exp . do Exp                           (rule 42)

	do             shift, and enter state 78
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            shift, and enter state 50
	'<>'           shift, and enter state 51
	'<'            shift, and enter state 52
	'<='           shift, and enter state 53
	'>'            shift, and enter state 54
	'>='           shift, and enter state 55


State 37

	VarDeclList -> VarDeclList . VarDecl                (rule 16)
	Exp -> let VarDeclList . in ExpSeq end              (rule 44)

	in             shift, and enter state 77
	var            shift, and enter state 9

	VarDecl        goto state 76

State 38

	VarDeclList -> VarDecl .                            (rule 15)

	in             reduce using rule 15
	var            reduce using rule 15


State 39

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)
	Exp -> if Exp . then Exp                            (rule 40)
	Exp -> if Exp . then Exp else Exp                   (rule 41)

	then           shift, and enter state 75
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            shift, and enter state 50
	'<>'           shift, and enter state 51
	'<'            shift, and enter state 52
	'<='           shift, and enter state 53
	'>'            shift, and enter state 54
	'>='           shift, and enter state 55


State 40

	Exp -> scani '(' . ')'                              (rule 46)

	')'            shift, and enter state 74


State 41

	Exp -> printi '(' . Exp ')'                         (rule 45)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 73

State 42

	Exp -> for id . ':=' Exp to Exp do Exp              (rule 43)

	':='           shift, and enter state 72


State 43

	Exp -> id '(' . ExpList ')'                         (rule 38)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	ExpList        goto state 70
	Exp            goto state 71

State 44

	Exp -> id ':=' . Exp                                (rule 37)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 69

State 45

	Exp -> Exp '+' . Exp                                (rule 25)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 68

State 46

	Exp -> Exp '-' . Exp                                (rule 26)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 67

State 47

	Exp -> Exp '*' . Exp                                (rule 27)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 66

State 48

	Exp -> Exp '/' . Exp                                (rule 28)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 65

State 49

	Exp -> Exp '%' . Exp                                (rule 29)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 64

State 50

	Exp -> Exp '=' . Exp                                (rule 30)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 63

State 51

	Exp -> Exp '<>' . Exp                               (rule 31)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 62

State 52

	Exp -> Exp '<' . Exp                                (rule 32)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 61

State 53

	Exp -> Exp '<=' . Exp                               (rule 33)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 60

State 54

	Exp -> Exp '>' . Exp                                (rule 34)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 59

State 55

	Exp -> Exp '>=' . Exp                               (rule 35)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 58

State 56

	ExpSeq -> ExpSeq ';' . Exp                          (rule 20)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 57

State 57

	ExpSeq -> ExpSeq ';' Exp .                          (rule 20)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	end            reduce using rule 20
	';'            reduce using rule 20
	')'            reduce using rule 20
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            shift, and enter state 50
	'<>'           shift, and enter state 51
	'<'            shift, and enter state 52
	'<='           shift, and enter state 53
	'>'            shift, and enter state 54
	'>='           shift, and enter state 55
	%eof           reduce using rule 20


State 58

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)
	Exp -> Exp '>=' Exp .                               (rule 35)

	do             reduce using rule 35
	else           reduce using rule 35
	end            reduce using rule 35
	function       reduce using rule 35
	in             reduce using rule 35
	to             reduce using rule 35
	then           reduce using rule 35
	var            reduce using rule 35
	','            reduce using rule 35
	';'            reduce using rule 35
	')'            reduce using rule 35
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            reduce using rule 35
	'<>'           reduce using rule 35
	'<'            shift, and enter state 52
			(reduce using rule 35)

	'<='           reduce using rule 35
	'>'            reduce using rule 35
	'>='           reduce using rule 35
	%eof           reduce using rule 35


State 59

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp '>' Exp .                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	do             reduce using rule 34
	else           reduce using rule 34
	end            reduce using rule 34
	function       reduce using rule 34
	in             reduce using rule 34
	to             reduce using rule 34
	then           reduce using rule 34
	var            reduce using rule 34
	','            reduce using rule 34
	';'            reduce using rule 34
	')'            reduce using rule 34
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            reduce using rule 34
	'<>'           reduce using rule 34
	'<'            shift, and enter state 52
			(reduce using rule 34)

	'<='           reduce using rule 34
	'>'            reduce using rule 34
	'>='           reduce using rule 34
	%eof           reduce using rule 34


State 60

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp '<=' Exp .                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	do             reduce using rule 33
	else           reduce using rule 33
	end            reduce using rule 33
	function       reduce using rule 33
	in             reduce using rule 33
	to             reduce using rule 33
	then           reduce using rule 33
	var            reduce using rule 33
	','            reduce using rule 33
	';'            reduce using rule 33
	')'            reduce using rule 33
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            reduce using rule 33
	'<>'           reduce using rule 33
	'<'            shift, and enter state 52
			(reduce using rule 33)

	'<='           reduce using rule 33
	'>'            reduce using rule 33
	'>='           reduce using rule 33
	%eof           reduce using rule 33


State 61

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp '<' Exp .                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	do             reduce using rule 32
	else           reduce using rule 32
	end            reduce using rule 32
	function       reduce using rule 32
	in             reduce using rule 32
	to             reduce using rule 32
	then           reduce using rule 32
	var            reduce using rule 32
	','            reduce using rule 32
	';'            reduce using rule 32
	')'            reduce using rule 32
	'+'            shift, and enter state 45
			(reduce using rule 32)

	'-'            shift, and enter state 46
			(reduce using rule 32)

	'*'            shift, and enter state 47
			(reduce using rule 32)

	'/'            shift, and enter state 48
			(reduce using rule 32)

	'%'            shift, and enter state 49
			(reduce using rule 32)

	'='            shift, and enter state 50
			(reduce using rule 32)

	'<>'           shift, and enter state 51
			(reduce using rule 32)

	'<'            shift, and enter state 52
			(reduce using rule 32)

	'<='           shift, and enter state 53
			(reduce using rule 32)

	'>'            shift, and enter state 54
			(reduce using rule 32)

	'>='           shift, and enter state 55
			(reduce using rule 32)

	%eof           reduce using rule 32


State 62

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp '<>' Exp .                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	do             reduce using rule 31
	else           reduce using rule 31
	end            reduce using rule 31
	function       reduce using rule 31
	in             reduce using rule 31
	to             reduce using rule 31
	then           reduce using rule 31
	var            reduce using rule 31
	','            reduce using rule 31
	';'            reduce using rule 31
	')'            reduce using rule 31
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            fail
	'<>'           fail
	'<'            shift, and enter state 52
			(reduce using rule 31)

	'<='           shift, and enter state 53
	'>'            shift, and enter state 54
	'>='           shift, and enter state 55
	%eof           reduce using rule 31


State 63

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp '=' Exp .                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	do             reduce using rule 30
	else           reduce using rule 30
	end            reduce using rule 30
	function       reduce using rule 30
	in             reduce using rule 30
	to             reduce using rule 30
	then           reduce using rule 30
	var            reduce using rule 30
	','            reduce using rule 30
	';'            reduce using rule 30
	')'            reduce using rule 30
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            fail
	'<>'           fail
	'<'            shift, and enter state 52
			(reduce using rule 30)

	'<='           shift, and enter state 53
	'>'            shift, and enter state 54
	'>='           shift, and enter state 55
	%eof           reduce using rule 30


State 64

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp '%' Exp .                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	do             reduce using rule 29
	else           reduce using rule 29
	end            reduce using rule 29
	function       reduce using rule 29
	in             reduce using rule 29
	to             reduce using rule 29
	then           reduce using rule 29
	var            reduce using rule 29
	','            reduce using rule 29
	';'            reduce using rule 29
	')'            reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	'%'            reduce using rule 29
	'='            reduce using rule 29
	'<>'           reduce using rule 29
	'<'            shift, and enter state 52
			(reduce using rule 29)

	'<='           reduce using rule 29
	'>'            reduce using rule 29
	'>='           reduce using rule 29
	%eof           reduce using rule 29


State 65

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp '/' Exp .                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	do             reduce using rule 28
	else           reduce using rule 28
	end            reduce using rule 28
	function       reduce using rule 28
	in             reduce using rule 28
	to             reduce using rule 28
	then           reduce using rule 28
	var            reduce using rule 28
	','            reduce using rule 28
	';'            reduce using rule 28
	')'            reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	'%'            reduce using rule 28
	'='            reduce using rule 28
	'<>'           reduce using rule 28
	'<'            shift, and enter state 52
			(reduce using rule 28)

	'<='           reduce using rule 28
	'>'            reduce using rule 28
	'>='           reduce using rule 28
	%eof           reduce using rule 28


State 66

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp '*' Exp .                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	do             reduce using rule 27
	else           reduce using rule 27
	end            reduce using rule 27
	function       reduce using rule 27
	in             reduce using rule 27
	to             reduce using rule 27
	then           reduce using rule 27
	var            reduce using rule 27
	','            reduce using rule 27
	';'            reduce using rule 27
	')'            reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'%'            reduce using rule 27
	'='            reduce using rule 27
	'<>'           reduce using rule 27
	'<'            shift, and enter state 52
			(reduce using rule 27)

	'<='           reduce using rule 27
	'>'            reduce using rule 27
	'>='           reduce using rule 27
	%eof           reduce using rule 27


State 67

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp '-' Exp .                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	do             reduce using rule 26
	else           reduce using rule 26
	end            reduce using rule 26
	function       reduce using rule 26
	in             reduce using rule 26
	to             reduce using rule 26
	then           reduce using rule 26
	var            reduce using rule 26
	','            reduce using rule 26
	';'            reduce using rule 26
	')'            reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            reduce using rule 26
	'<>'           reduce using rule 26
	'<'            shift, and enter state 52
			(reduce using rule 26)

	'<='           reduce using rule 26
	'>'            reduce using rule 26
	'>='           reduce using rule 26
	%eof           reduce using rule 26


State 68

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp '+' Exp .                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	do             reduce using rule 25
	else           reduce using rule 25
	end            reduce using rule 25
	function       reduce using rule 25
	in             reduce using rule 25
	to             reduce using rule 25
	then           reduce using rule 25
	var            reduce using rule 25
	','            reduce using rule 25
	';'            reduce using rule 25
	')'            reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            reduce using rule 25
	'<>'           reduce using rule 25
	'<'            shift, and enter state 52
			(reduce using rule 25)

	'<='           reduce using rule 25
	'>'            reduce using rule 25
	'>='           reduce using rule 25
	%eof           reduce using rule 25


State 69

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)
	Exp -> id ':=' Exp .                                (rule 37)

	do             reduce using rule 37
	else           reduce using rule 37
	end            reduce using rule 37
	function       reduce using rule 37
	in             reduce using rule 37
	to             reduce using rule 37
	then           reduce using rule 37
	var            reduce using rule 37
	','            reduce using rule 37
	';'            reduce using rule 37
	')'            reduce using rule 37
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            shift, and enter state 50
	'<>'           shift, and enter state 51
	'<'            shift, and enter state 52
			(reduce using rule 37)

	'<='           shift, and enter state 53
	'>'            shift, and enter state 54
	'>='           shift, and enter state 55
	%eof           reduce using rule 37


State 70

	ExpList -> ExpList . ',' Exp                        (rule 22)
	Exp -> id '(' ExpList . ')'                         (rule 38)

	','            shift, and enter state 98
	')'            shift, and enter state 99


State 71

	ExpList -> Exp .                                    (rule 21)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	','            reduce using rule 21
	')'            reduce using rule 21
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            shift, and enter state 50
	'<>'           shift, and enter state 51
	'<'            shift, and enter state 52
	'<='           shift, and enter state 53
	'>'            shift, and enter state 54
	'>='           shift, and enter state 55


State 72

	Exp -> for id ':=' . Exp to Exp do Exp              (rule 43)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 97

State 73

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)
	Exp -> printi '(' Exp . ')'                         (rule 45)

	')'            shift, and enter state 96
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            shift, and enter state 50
	'<>'           shift, and enter state 51
	'<'            shift, and enter state 52
	'<='           shift, and enter state 53
	'>'            shift, and enter state 54
	'>='           shift, and enter state 55


State 74

	Exp -> scani '(' ')' .                              (rule 46)

	do             reduce using rule 46
	else           reduce using rule 46
	end            reduce using rule 46
	function       reduce using rule 46
	in             reduce using rule 46
	to             reduce using rule 46
	then           reduce using rule 46
	var            reduce using rule 46
	','            reduce using rule 46
	';'            reduce using rule 46
	')'            reduce using rule 46
	'+'            reduce using rule 46
	'-'            reduce using rule 46
	'*'            reduce using rule 46
	'/'            reduce using rule 46
	'%'            reduce using rule 46
	'='            reduce using rule 46
	'<>'           reduce using rule 46
	'<'            reduce using rule 46
	'<='           reduce using rule 46
	'>'            reduce using rule 46
	'>='           reduce using rule 46
	%eof           reduce using rule 46


State 75

	Exp -> if Exp then . Exp                            (rule 40)
	Exp -> if Exp then . Exp else Exp                   (rule 41)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 95

State 76

	VarDeclList -> VarDeclList VarDecl .                (rule 16)

	in             reduce using rule 16
	var            reduce using rule 16


State 77

	Exp -> let VarDeclList in . ExpSeq end              (rule 44)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	ExpSeq         goto state 94
	Exp            goto state 16

State 78

	Exp -> while Exp do . Exp                           (rule 42)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 93

State 79

	Exp -> '(' ExpSeq ')' .                             (rule 39)

	do             reduce using rule 39
	else           reduce using rule 39
	end            reduce using rule 39
	function       reduce using rule 39
	in             reduce using rule 39
	to             reduce using rule 39
	then           reduce using rule 39
	var            reduce using rule 39
	','            reduce using rule 39
	';'            reduce using rule 39
	')'            reduce using rule 39
	'+'            reduce using rule 39
	'-'            reduce using rule 39
	'*'            reduce using rule 39
	'/'            reduce using rule 39
	'%'            reduce using rule 39
	'='            reduce using rule 39
	'<>'           reduce using rule 39
	'<'            reduce using rule 39
	'<='           reduce using rule 39
	'>'            reduce using rule 39
	'>='           reduce using rule 39
	%eof           reduce using rule 39


State 80

	FunDecl -> function id '(' ')' ':' . TypeId '=' Exp    (rule 9)

	int            shift, and enter state 89
	string         shift, and enter state 90

	TypeId         goto state 92

State 81

	FunDecl -> function id '(' ')' '=' . Exp            (rule 7)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 91

State 82

	TypeField -> id ':' . TypeId                        (rule 12)

	int            shift, and enter state 89
	string         shift, and enter state 90

	TypeId         goto state 88

State 83

	TypeFields -> TypeFields ',' . TypeField            (rule 11)

	id             shift, and enter state 32

	TypeField      goto state 87

State 84

	FunDecl -> function id '(' TypeFields ')' . '=' Exp    (rule 6)
	FunDecl -> function id '(' TypeFields ')' . ':' TypeId '=' Exp    (rule 8)

	':'            shift, and enter state 85
	'='            shift, and enter state 86


State 85

	FunDecl -> function id '(' TypeFields ')' ':' . TypeId '=' Exp    (rule 8)

	int            shift, and enter state 89
	string         shift, and enter state 90

	TypeId         goto state 106

State 86

	FunDecl -> function id '(' TypeFields ')' '=' . Exp    (rule 6)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 105

State 87

	TypeFields -> TypeFields ',' TypeField .            (rule 11)

	','            reduce using rule 11
	')'            reduce using rule 11


State 88

	TypeField -> id ':' TypeId .                        (rule 12)

	','            reduce using rule 12
	')'            reduce using rule 12


State 89

	TypeId -> int .                                     (rule 13)

	','            reduce using rule 13
	')'            reduce using rule 13
	'='            reduce using rule 13


State 90

	TypeId -> string .                                  (rule 14)

	','            reduce using rule 14
	')'            reduce using rule 14
	'='            reduce using rule 14


State 91

	FunDecl -> function id '(' ')' '=' Exp .            (rule 7)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	function       reduce using rule 7
	in             reduce using rule 7
	var            reduce using rule 7
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            shift, and enter state 50
	'<>'           shift, and enter state 51
	'<'            shift, and enter state 52
	'<='           shift, and enter state 53
	'>'            shift, and enter state 54
	'>='           shift, and enter state 55


State 92

	FunDecl -> function id '(' ')' ':' TypeId . '=' Exp    (rule 9)

	'='            shift, and enter state 104


State 93

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)
	Exp -> while Exp do Exp .                           (rule 42)

	do             reduce using rule 42
	else           reduce using rule 42
	end            reduce using rule 42
	function       reduce using rule 42
	in             reduce using rule 42
	to             reduce using rule 42
	then           reduce using rule 42
	var            reduce using rule 42
	','            reduce using rule 42
	';'            reduce using rule 42
	')'            reduce using rule 42
	'+'            shift, and enter state 45
			(reduce using rule 42)

	'-'            shift, and enter state 46
			(reduce using rule 42)

	'*'            shift, and enter state 47
			(reduce using rule 42)

	'/'            shift, and enter state 48
			(reduce using rule 42)

	'%'            shift, and enter state 49
			(reduce using rule 42)

	'='            shift, and enter state 50
			(reduce using rule 42)

	'<>'           shift, and enter state 51
			(reduce using rule 42)

	'<'            shift, and enter state 52
			(reduce using rule 42)

	'<='           shift, and enter state 53
			(reduce using rule 42)

	'>'            shift, and enter state 54
			(reduce using rule 42)

	'>='           shift, and enter state 55
			(reduce using rule 42)

	%eof           reduce using rule 42


State 94

	ExpSeq -> ExpSeq . ';' Exp                          (rule 20)
	Exp -> let VarDeclList in ExpSeq . end              (rule 44)

	end            shift, and enter state 103
	';'            shift, and enter state 56


State 95

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)
	Exp -> if Exp then Exp .                            (rule 40)
	Exp -> if Exp then Exp . else Exp                   (rule 41)

	do             reduce using rule 40
	else           shift, and enter state 102
			(reduce using rule 40)

	end            reduce using rule 40
	function       reduce using rule 40
	in             reduce using rule 40
	to             reduce using rule 40
	then           reduce using rule 40
	var            reduce using rule 40
	','            reduce using rule 40
	';'            reduce using rule 40
	')'            reduce using rule 40
	'+'            shift, and enter state 45
			(reduce using rule 40)

	'-'            shift, and enter state 46
			(reduce using rule 40)

	'*'            shift, and enter state 47
			(reduce using rule 40)

	'/'            shift, and enter state 48
			(reduce using rule 40)

	'%'            shift, and enter state 49
			(reduce using rule 40)

	'='            shift, and enter state 50
			(reduce using rule 40)

	'<>'           shift, and enter state 51
			(reduce using rule 40)

	'<'            shift, and enter state 52
			(reduce using rule 40)

	'<='           shift, and enter state 53
			(reduce using rule 40)

	'>'            shift, and enter state 54
			(reduce using rule 40)

	'>='           shift, and enter state 55
			(reduce using rule 40)

	%eof           reduce using rule 40


State 96

	Exp -> printi '(' Exp ')' .                         (rule 45)

	do             reduce using rule 45
	else           reduce using rule 45
	end            reduce using rule 45
	function       reduce using rule 45
	in             reduce using rule 45
	to             reduce using rule 45
	then           reduce using rule 45
	var            reduce using rule 45
	','            reduce using rule 45
	';'            reduce using rule 45
	')'            reduce using rule 45
	'+'            reduce using rule 45
	'-'            reduce using rule 45
	'*'            reduce using rule 45
	'/'            reduce using rule 45
	'%'            reduce using rule 45
	'='            reduce using rule 45
	'<>'           reduce using rule 45
	'<'            reduce using rule 45
	'<='           reduce using rule 45
	'>'            reduce using rule 45
	'>='           reduce using rule 45
	%eof           reduce using rule 45


State 97

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)
	Exp -> for id ':=' Exp . to Exp do Exp              (rule 43)

	to             shift, and enter state 101
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            shift, and enter state 50
	'<>'           shift, and enter state 51
	'<'            shift, and enter state 52
	'<='           shift, and enter state 53
	'>'            shift, and enter state 54
	'>='           shift, and enter state 55


State 98

	ExpList -> ExpList ',' . Exp                        (rule 22)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 100

State 99

	Exp -> id '(' ExpList ')' .                         (rule 38)

	do             reduce using rule 38
	else           reduce using rule 38
	end            reduce using rule 38
	function       reduce using rule 38
	in             reduce using rule 38
	to             reduce using rule 38
	then           reduce using rule 38
	var            reduce using rule 38
	','            reduce using rule 38
	';'            reduce using rule 38
	')'            reduce using rule 38
	'+'            reduce using rule 38
	'-'            reduce using rule 38
	'*'            reduce using rule 38
	'/'            reduce using rule 38
	'%'            reduce using rule 38
	'='            reduce using rule 38
	'<>'           reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	%eof           reduce using rule 38


State 100

	ExpList -> ExpList ',' Exp .                        (rule 22)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	','            reduce using rule 22
	')'            reduce using rule 22
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            shift, and enter state 50
	'<>'           shift, and enter state 51
	'<'            shift, and enter state 52
	'<='           shift, and enter state 53
	'>'            shift, and enter state 54
	'>='           shift, and enter state 55


State 101

	Exp -> for id ':=' Exp to . Exp do Exp              (rule 43)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 110

State 102

	Exp -> if Exp then Exp else . Exp                   (rule 41)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 109

State 103

	Exp -> let VarDeclList in ExpSeq end .              (rule 44)

	do             reduce using rule 44
	else           reduce using rule 44
	end            reduce using rule 44
	function       reduce using rule 44
	in             reduce using rule 44
	to             reduce using rule 44
	then           reduce using rule 44
	var            reduce using rule 44
	','            reduce using rule 44
	';'            reduce using rule 44
	')'            reduce using rule 44
	'+'            reduce using rule 44
	'-'            reduce using rule 44
	'*'            reduce using rule 44
	'/'            reduce using rule 44
	'%'            reduce using rule 44
	'='            reduce using rule 44
	'<>'           reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'>'            reduce using rule 44
	'>='           reduce using rule 44
	%eof           reduce using rule 44


State 104

	FunDecl -> function id '(' ')' ':' TypeId '=' . Exp    (rule 9)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 108

State 105

	FunDecl -> function id '(' TypeFields ')' '=' Exp .    (rule 6)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	function       reduce using rule 6
	in             reduce using rule 6
	var            reduce using rule 6
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            shift, and enter state 50
	'<>'           shift, and enter state 51
	'<'            shift, and enter state 52
	'<='           shift, and enter state 53
	'>'            shift, and enter state 54
	'>='           shift, and enter state 55


State 106

	FunDecl -> function id '(' TypeFields ')' ':' TypeId . '=' Exp    (rule 8)

	'='            shift, and enter state 107


State 107

	FunDecl -> function id '(' TypeFields ')' ':' TypeId '=' . Exp    (rule 8)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 112

State 108

	FunDecl -> function id '(' ')' ':' TypeId '=' Exp .    (rule 9)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	function       reduce using rule 9
	in             reduce using rule 9
	var            reduce using rule 9
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            shift, and enter state 50
	'<>'           shift, and enter state 51
	'<'            shift, and enter state 52
	'<='           shift, and enter state 53
	'>'            shift, and enter state 54
	'>='           shift, and enter state 55


State 109

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)
	Exp -> if Exp then Exp else Exp .                   (rule 41)

	do             reduce using rule 41
	else           reduce using rule 41
	end            reduce using rule 41
	function       reduce using rule 41
	in             reduce using rule 41
	to             reduce using rule 41
	then           reduce using rule 41
	var            reduce using rule 41
	','            reduce using rule 41
	';'            reduce using rule 41
	')'            reduce using rule 41
	'+'            shift, and enter state 45
			(reduce using rule 41)

	'-'            shift, and enter state 46
			(reduce using rule 41)

	'*'            shift, and enter state 47
			(reduce using rule 41)

	'/'            shift, and enter state 48
			(reduce using rule 41)

	'%'            shift, and enter state 49
			(reduce using rule 41)

	'='            shift, and enter state 50
			(reduce using rule 41)

	'<>'           shift, and enter state 51
			(reduce using rule 41)

	'<'            shift, and enter state 52
			(reduce using rule 41)

	'<='           shift, and enter state 53
			(reduce using rule 41)

	'>'            shift, and enter state 54
			(reduce using rule 41)

	'>='           shift, and enter state 55
			(reduce using rule 41)

	%eof           reduce using rule 41


State 110

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)
	Exp -> for id ':=' Exp to Exp . do Exp              (rule 43)

	do             shift, and enter state 111
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            shift, and enter state 50
	'<>'           shift, and enter state 51
	'<'            shift, and enter state 52
	'<='           shift, and enter state 53
	'>'            shift, and enter state 54
	'>='           shift, and enter state 55


State 111

	Exp -> for id ':=' Exp to Exp do . Exp              (rule 43)

	num            shift, and enter state 17
	id             shift, and enter state 18
	for            shift, and enter state 19
	printi         shift, and enter state 20
	scani          shift, and enter state 21
	if             shift, and enter state 22
	let            shift, and enter state 23
	while          shift, and enter state 24
	'('            shift, and enter state 25
	'-'            shift, and enter state 26

	LValue         goto state 14
	Exp            goto state 113

State 112

	FunDecl -> function id '(' TypeFields ')' ':' TypeId '=' Exp .    (rule 8)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)

	function       reduce using rule 8
	in             reduce using rule 8
	var            reduce using rule 8
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'%'            shift, and enter state 49
	'='            shift, and enter state 50
	'<>'           shift, and enter state 51
	'<'            shift, and enter state 52
	'<='           shift, and enter state 53
	'>'            shift, and enter state 54
	'>='           shift, and enter state 55


State 113

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '%' Exp                                (rule 29)
	Exp -> Exp . '=' Exp                                (rule 30)
	Exp -> Exp . '<>' Exp                               (rule 31)
	Exp -> Exp . '<' Exp                                (rule 32)
	Exp -> Exp . '<=' Exp                               (rule 33)
	Exp -> Exp . '>' Exp                                (rule 34)
	Exp -> Exp . '>=' Exp                               (rule 35)
	Exp -> for id ':=' Exp to Exp do Exp .              (rule 43)

	do             reduce using rule 43
	else           reduce using rule 43
	end            reduce using rule 43
	function       reduce using rule 43
	in             reduce using rule 43
	to             reduce using rule 43
	then           reduce using rule 43
	var            reduce using rule 43
	','            reduce using rule 43
	';'            reduce using rule 43
	')'            reduce using rule 43
	'+'            shift, and enter state 45
			(reduce using rule 43)

	'-'            shift, and enter state 46
			(reduce using rule 43)

	'*'            shift, and enter state 47
			(reduce using rule 43)

	'/'            shift, and enter state 48
			(reduce using rule 43)

	'%'            shift, and enter state 49
			(reduce using rule 43)

	'='            shift, and enter state 50
			(reduce using rule 43)

	'<>'           shift, and enter state 51
			(reduce using rule 43)

	'<'            shift, and enter state 52
			(reduce using rule 43)

	'<='           shift, and enter state 53
			(reduce using rule 43)

	'>'            shift, and enter state 54
			(reduce using rule 43)

	'>='           shift, and enter state 55
			(reduce using rule 43)

	%eof           reduce using rule 43


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 47
Number of terminals: 43
Number of non-terminals: 14
Number of states: 114
